// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int         @id @default(autoincrement())
  email             String      @unique
  password          String
  name              String
  role              Role        @default(STUDENT)
  bio               String?
  avatar            String?
  verification_code String?
  is_verified       Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  posts             Post[]
  comments          Comment[]
  reactions         Reaction[]
  department        Department? @relation(fields: [departmentId], references: [id])
  departmentId      Int?
  tags              Tag[]
  gender            String?
  ethnicity         String?
  religiousBelief   String?
  notifications Notification[]
  tagSubscriptions TagSubscription[]
}

model Faculty {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  departments Department[]
  tags        Tag[]
}

model Department {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  faculty     Faculty   @relation(fields: [facultyId], references: [id])
  facultyId   Int
  accounts    Account[]
  tags        Tag[]

  @@unique([name, facultyId])
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  posts       Post[]
}

model Post {
  id          Int         @id @default(autoincrement())
  title       String
  content     String
  description String?
  published   Boolean     @default(false)
  author      Account     @relation(fields: [authorId], references: [id])
  authorId    Int
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  Int
  fileDest    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  comments    Comment[]
  reactions   Reaction[]
  tags        PostToTag[] @relation("PostTags")
  topics      Topic[]     @relation("PostTopics")
  uploads     Upload[]
  images      Image[] // Relation to Image model
  publicity   Publicity[]
  notifications Notification[]
}

model Comment {
  id            Int       @id @default(autoincrement())
  content       String
  author        Account   @relation(fields: [authorId], references: [id])
  authorId      Int
  post          Post      @relation(fields: [postId], references: [id])
  postId        Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  parentComment Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  parentId      Int?
  childComments Comment[] @relation("CommentToComment")
}

model Tag {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  posts       PostToTag[]
  accounts    Account[]
  departments Department[]
  faculties   Faculty[]
  tagSubscriptions TagSubscription[]
  // PostToTag   PostToTag[]
}

model PostToTag {
  postId Int
  tagId  Int
  // post   Post  @relation(fields: [postId], references: [id])
  tag    Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)
  // Tag    Tag @relation("PostTags")
  Post   Post  @relation(fields: [postId], references: [id], name: "PostTags")

  @@id([postId, tagId])
  @@map("post_to_tag")
}

model Upload {
  id        Int      @id @default(autoincrement())
  fileName  String
  postId    Int
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Reaction {
  id     Int          @id @default(autoincrement())
  type   ReactionType
  post   Post         @relation(fields: [postId], references: [id])
  postId Int
  user   Account      @relation(fields: [userId], references: [id])
  userId Int

  @@unique([postId, userId])
}

enum ReactionType {
  like
  love
  haha
  wow
  sad
  angry
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String // URL of the image
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
}

model Publicity {
  id            Int       @id @default(autoincrement())
  postId        Int      
  post          Post     @relation(fields: [postId], references: [id])
  amount        Decimal  @db.Decimal(10, 2)
  status        PublicityStatus @default(PENDING)
  targetFilters Json     // Stores targeting criteria
  startDate     DateTime @default(now())
  endDate       DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([postId])
}


model Notification {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        Account   @relation(fields: [userId], references: [id])
  postId      Int
  post        Post      @relation(fields: [postId], references: [id])
  type        NotificationType
  message    String?  
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

model TagSubscription {
  id     Int @id @default(autoincrement())
  userId Int
  tagId  Int
  user   Account @relation(fields: [userId], references: [id])
  tag    Tag     @relation(fields: [tagId], references: [id])
}

model Topic {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  posts       Post[]  @relation("PostTopics")
}

enum NotificationType {
  PUBLIC_POST
  TARGETED_POST
  DEPARTMENT_POST
  FACULTY_POST
  POST_CREATED 
  POST_UPDATED
  COMMENT
  REACTION
  CUSTOM
  USER_MENTION  
  TAG_POST
  
}
enum PublicityStatus {
  PENDING
  ACTIVE
  INACTIVE
  COMPLETED
  CANCELLED
}


enum Role {
  STUDENT
  TEACHER
  ADMIN
}
